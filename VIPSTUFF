Things I don't understand:
What the hell is the router doing, why is it passing data?
	The router determines HOW to get to the next screen.
	The view controller det
Wouldn't a completion handler be better?
	No, because sometimes there can be loads of potential routes.
What's "setup" in the view controller? Is that the best place?
	//


The most important thing is testability
Reusability is overrated, workers are the things most reusable


IN ORDER OF DEPENDENCY:
Model
	Dumb model info

Worker
	Global classes that can be used inside interactors
	Sometimes wrap a single API call, sometimes have more. Talk to services and provide model data to interactors.
	They can declare protocols, for services to implement.

Interactor
	Talks gets information through workers, sends to presenter. Never use vars directly, enforce uni-directional flow of data.

Services
	Implement protocols from workers for functionality
	External dependancies, wrappers for API's etc. Deal with raw data -> model data.

Presenter
	Formats information from interactor, sends ViewModel to ViewController

ViewController
	UI
	Event handling
	Navigation through router
	No business logic
	Passing data backwards - use delegate

Router
	How to get to the next scene
	Passing data from interactor


RIJKSMUSEUM:
DatabaseService
APIService

ArtPortfolioWorker
ArtDetailsWorker



"For each scene, you have one view controller, one interactor, one presenter, to handle any number of use cases. Each use case is represented by a triplet of request-response-view model defined in your <Scene>Models.swift. Typically but not always, the number of input/output methods equals the number of your use case structs."
