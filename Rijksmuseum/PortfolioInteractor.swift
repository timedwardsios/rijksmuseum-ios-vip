//
//  PortfolioInteractor.swift
//  Rijksmuseum
//
//  Created by Tim Edwards on 29/07/2018.
//  Copyright (c) 2018 Tim Edwards. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PortfolioInteractorInterface{
    func fetchListings(request: Portfolio.FetchListings.Request)
    func numberOfListings()->Int
    func imageUrlForListingAtIndex(_ index:Int)->URL?
    func setSelectedRow(_ row:Int)
}

protocol PortfolioDataStore{
    var selectedArtPrimitive:ArtPrimitive? { get }
}

class PortfolioInteractor: PortfolioDataStore{
    let presenter: PortfolioPresenterInterface
    let artPrimitiveWorker: ArtPrimitiveWorkerInterface
    init(presenter:PortfolioPresenterInterface,
         artPrimitiveWorker:ArtPrimitiveWorkerInterface) {
        self.presenter = presenter
        self.artPrimitiveWorker = artPrimitiveWorker
    }

    var artPrimitives = [ArtPrimitive]()
    var selectedArtPrimitive: ArtPrimitive?
}

extension PortfolioInteractor: PortfolioInteractorInterface {
    func fetchListings(request: Portfolio.FetchListings.Request) {
        artPrimitiveWorker.fetchPrimitives {[weak self] (result) in
            switch result {
            case .success(let artPrimitives):
                self?.artPrimitives = artPrimitives
                self?.presenter.didFetchListings(response: Portfolio.FetchListings.Response())
            case .failure(_):
                fatalError()
            }
        }
    }

    func numberOfListings() -> Int {
        return artPrimitives.count
    }

    func imageUrlForListingAtIndex(_ index: Int) -> URL? {
        if artPrimitives.indices.contains(index) {
            return artPrimitives[index].imageUrl
        }
        return nil
    }

    func setSelectedRow(_ row: Int) {
        if artPrimitives.indices.contains(row) {
            selectedArtPrimitive = artPrimitives[row]
        }
    }
}
